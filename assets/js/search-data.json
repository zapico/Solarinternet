{"0": {
    "doc": "Battery reading",
    "title": "Battery status reading",
    "content": "Reading the charging status of a battery is not as straightforward as it would seem. Victron energy provides this information from some of their MPPTs through a propietary port called VE.direct. If using an MPTT wihout port, an external battery monitor can be installed, like Victron Smart Battery Shunt. Then one needs a VE.direct to USB cable to connect the MPPT/shunt to the server through USB. Once the setup is working the data can be read using serial. The port should be updated to reflect where the cable is connected. import serial sio = serial.Serial(port='/dev/ttyUSB0',baudrate=19200,parity=serial.PARITY_NONE,stopbits=serial.STOPBITS_ONE,bytesize=serial.EIGHTBITS,timeout=12) . Detail information about the VE protocol can be found in the VE.direct protocel whitepaper. For our application we just use battery charge and load in watt. First all lines are read one by one, this can be printed to identify other values that may be interesting. line = sio.readline().decode('iso-8859-1') . The the lines for power in Watt and percentage of battery are identified and the value extracted from the string. if (line.find(\"P \") != -1): kw = float(line[2:]) if (line.find(\"SOC\") != -1): battery = float(line[4:])/10 . The whole code can be found below and at github. It saves the data in a json file for the website to read, but the data can be saved in a database, sent using MQTT or any other option. It reads the data every 10 minutes, this can be changed in the time.sleep() line. import serial from datetime import datetime import time import json import os # Connect to serial sio = serial.Serial(port='/dev/ttyUSB0',baudrate=19200,parity=serial.PARITY_NONE,stopbits=serial.STOPBITS_ONE,bytesize=serial.EIGHTBITS,timeout=12) print(\"connected to: \" + sio.portstr) # Init variables count=1 kw = 0 battery = 0 # Loop while True: # Check that serial has read both values if (kw!=0 and battery!=0) or (battery==100): dictionary = { \"kw\": kw, \"battery\": battery, \"time\": str(datetime.now()) } # Save as status json and to history with open(\"/var/www/thehackfarm/html/battery.json\", \"w\") as outfile: json.dump(dictionary, outfile) # Append to history.json. This dictionary can then be read with: # with open('my_file') as f: # my_list = [json.loads(line) for line in f] with open('/var/www/thehackfarm/html/history.json', 'a') as f: json.dump(dictionary, f) f.write(os.linesep) # Reset numbers and sleep for 10 minutes kw = 0 battery = 0 time.sleep(600) line = sio.readline().decode('iso-8859-1') # read kwh in if (-1 != line.find(\"P \")): kw = float(line[2:]) print(kw) # read battery if (-1 != line.find(\"SOC\")): battery = float(line[4:])/10 print(battery) . ",
    "url": "/battery.html",
    "relUrl": "/battery.html"
  },"1": {
    "doc": "Battery reading",
    "title": "Battery reading",
    "content": " ",
    "url": "/battery.html",
    "relUrl": "/battery.html"
  },"2": {
    "doc": "Discussions",
    "title": "Solar Internet",
    "content": ". ",
    "url": "/discussion.html",
    "relUrl": "/discussion.html"
  },"3": {
    "doc": "Discussions",
    "title": "Discussions",
    "content": " ",
    "url": "/discussion.html",
    "relUrl": "/discussion.html"
  },"4": {
    "doc": "Home",
    "title": "Home",
    "content": "Solar Internet is an exploration of internet beyond an always-on energy intensive paradigm. Solar energy is used to explore how internet services can become more energy aware and efficient. Sometimes the sun is shining and there are resources for energy intensive data processing. Sometimes it may be cloudy and computer power is reduced. Sometimes the server may be even offline for some time. This is an ongoing project and this website is still being filled with content and results. Explore the different servers we have created exploring this ideas, from microservers using minute amounts of energy, to cluster computing adapting to solar production. Learn more about how you can apply these solutions yourself in our instructions. Or read more texts discussing conflicts, problems and opportunities. Solar Internet is financed by the Swedish Energy Agency MESAM program . ",
    "url": "/",
    "relUrl": "/"
  },"5": {
    "doc": "Instructions",
    "title": "Solar Servers",
    "content": ". ",
    "url": "/instructions.html",
    "relUrl": "/instructions.html"
  },"6": {
    "doc": "Instructions",
    "title": "Instructions",
    "content": " ",
    "url": "/instructions.html",
    "relUrl": "/instructions.html"
  },"7": {
    "doc": "01 Raspberry pi",
    "title": "Solar Servers",
    "content": ". ",
    "url": "/p01.html",
    "relUrl": "/p01.html"
  },"8": {
    "doc": "01 Raspberry pi",
    "title": "01 Raspberry pi",
    "content": " ",
    "url": "/p01.html",
    "relUrl": "/p01.html"
  },"9": {
    "doc": "02 Powerbank Zero",
    "title": "Solar Servers",
    "content": ". ",
    "url": "/p02.html",
    "relUrl": "/p02.html"
  },"10": {
    "doc": "02 Powerbank Zero",
    "title": "02 Powerbank Zero",
    "content": " ",
    "url": "/p02.html",
    "relUrl": "/p02.html"
  },"11": {
    "doc": "03 Pi Cluster",
    "title": "Solar Servers",
    "content": ". ",
    "url": "/p03.html",
    "relUrl": "/p03.html"
  },"12": {
    "doc": "03 Pi Cluster",
    "title": "03 Pi Cluster",
    "content": " ",
    "url": "/p03.html",
    "relUrl": "/p03.html"
  },"13": {
    "doc": "04 Grid version",
    "title": "Solar Servers",
    "content": ". ",
    "url": "/p04.html",
    "relUrl": "/p04.html"
  },"14": {
    "doc": "04 Grid version",
    "title": "04 Grid version",
    "content": " ",
    "url": "/p04.html",
    "relUrl": "/p04.html"
  },"15": {
    "doc": "The Project",
    "title": "Solar Internet",
    "content": "Financed by the Swedish Energy Agency MESAM program . As people gain more access to the Internet, they use more data and energy demanding content (Zheleva et al. 2013). Content producers, technology designers, and service providers promote more energy-intensive media, and the cycle continues. Electricity consumption from the global internet accounts for up to about 9% of all electricity used when including computing devices, data centers, and the services that connect them (Van Heddeghem, et al. 2014). This figure is projected to double by 2030 (Andrae and Elder, 2015). The exponential increase in the energy demand of IT and online services is spread among societal actors and has resulted from three things: . | A vast proliferation of digital devices and screens to interact with (Widdicks et al. 2019a); | A continual increases in Internet traffic capacity (Morley et al. 2018); | The broad assumption by most users and many interaction designers that data traffic and online services are boundless and have little impact (Preist et al. 2016). | . This assumption of boundlessness, “the cornucopian paradigm”, is evident in the “all you can eat” data plans, video streaming bundles, increasing download sizes for software and updates, and autoplayed video adverts that we encounter on a daily basis. Across the globe, as connectivity increases so too do consumption of data-intensive media (Zheleva et al. 2013). Efficiency of devices, networks and data centres cannot keep up. By contrast, understanding digital services and their energy as a limited resource and disrupting (Poole, Comber and Hoonhout, 2015) the cornucopian paradigm in use and design of Internet services, can help to develop a more sustainable energy system and build resilient internet services (Tomlinson, et al. 2013; Nardi, et al. 2018; Widdicks and Pargman, 2019). Solar Internet explores a model of online interaction based on solar energy. We will create 5 Solar powered websites, designed around a new collection of interaction design principles and patterns for when we need to communicate energy constraints during interaction. Design principles offer general guidance on how best to think about and design for a specific context and design patterns for concrete solutions to recurring problems. We will also build a tool for consumers, designers, technology and service providers, to assess their energy demand for their Internet products. By doing so, we will demonstrate the potential for constraints-based interaction design of socio-technical infrastructures, such as the Internet, to help reduce energy consumption and design practices around Internet services. This project will create interaction design patterns that assume constraints rather than abundance. For instance, just as your phone battery runs out, so too could your internet browsers, or the server for the website you are visiting. For example, during winter, a Swedish home could only consume approximately 50MB of data a day for every meter of solar paneling, equating to 1 minute of streaming video. Although such limits are real for Internet users in rural and developing contexts (Wyche et al. 2010, Vigil, et al. 2015), in the current cornucopian paradigm the constraints of the Solar Internet provide a way in which we can bring the energy cost of Internet use closer to the practices of Internet use. This is a challenge to consumers, technology designers and developers, service providers and the energy-markets to reduce, by design, the electricity consumption of internet use. This project therefore will develop constraints-based design principles and patterns for Internet services. We will use limited solar energy as a means to create and explore new interactions, services and consumption patterns associated with Internet use. Estimates from Low Tech Magazine’s solar website implementation (De Decker, 2018) suggest savings on data transfer alone amount to an approximate 80% reduction. While transforming the entire Internet to a solar-powered infrastructure is beyond the scope of this project, reductions following the approximated 80-99% energy demand per user are targeted for our solar powered websites. In addition, we seek to reduce consumer perceptions and preferences for Internet use by 10-20% (i.e. visit or revisit websites at a reduced rate). ",
    "url": "/project.html",
    "relUrl": "/project.html"
  },"16": {
    "doc": "The Project",
    "title": "The Project",
    "content": " ",
    "url": "/project.html",
    "relUrl": "/project.html"
  },"17": {
    "doc": "Routing",
    "title": "Routing",
    "content": "Once you have a solar server set up at home, you need to connect it to the wider internet and an URL. For that you need to follow several steps: . | You need to have a static IP adress from your internet provider. | You change the DNS for your URL to point to that static adress. | You need to configure the router to allow port forwarding or set up the server as a DMZ. A DMZ (demilitiarized zone) exposes all ports of a specific local adress, then the ports can be closed at the device using a firewall. This works fine as long as the IP adress is static. If IP adress is not static a solution can be to update DNS dynamically using a cronjob and dynamic DNS and DynDNS protocol. | . ",
    "url": "/routing.html",
    "relUrl": "/routing.html"
  },"18": {
    "doc": "Solar Servers",
    "title": "Solar Servers",
    "content": ". ",
    "url": "/servers.html",
    "relUrl": "/servers.html"
  }
}
